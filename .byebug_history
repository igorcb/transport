continue
next
hash_ids
continue
next
driver
next
hash_ids
next
continue
ids.each do |i|
hash_ids
ids.each {|i| puts i}
ids
ids[0]
ids
hash_ids
next
hash_ids
next
params[:os]
params[:os][:ids]
continue
next
continue
next
continue
next
result
next
return
next
return
next
continue
next
continue
next
email
next
@ordem_service.billing_client.emails.type_sector(Sector::TypeSector::CONFIRMACAO_ENTREGA).blank?
next
@ordem_service.billing_client.nil?
next
continue
quit
continue
next
email
next
@ordem_service.billing_client.emails.type_sector(Sector::TypeSector::CONFIRMACAO_ENTREGA).blank?
@ordem_service.billing_client.emails.type_sector(Sector::TypeSector::CONFIRMACAO_ENTREGA)
@ordem_service.billing_client.nil?
next
continue
next
@ordem_service.billing_client.emails.type_sector(Sector::TypeSector::CONFIRMACAO_ENTREGA).present?
@ordem_service.billing_client.emails.type_sector(Sector::TypeSector::CONFIRMACAO_ENTREGA).nil?
@ordem_service.billing_client.emails.type_sector(Sector::TypeSector::CONFIRMACAO_ENTREGA)
@ordem_service.billing_client.emails.type_sector(Sector::TypeSector::CONFIRMACAO_ENTREGA).count
@ordem_service.billing_client.emails.type_sector(Sector::TypeSector::CONFIRMACAO_ENTREGA)
@ordem_service.billing_client.emails.type_sector: Sector::TypeSector::CONFIRMACAO_ENTREGA)
if @ordem_service.billing_client.emails.where(type_sector: Sector::TypeSector::CONFIRMACAO_ENTREGA)
if @ordem_service.billing_client.emails.type_sector(Sector::TypeSector::CONFIRMACAO_ENTREGA)
@ordem_service.billing_client.emails.present?
@ordem_service.billing_client.emails.count
@ordem_service.billing_client
next
@ordem_service.billing_client.nil?
@ordem_service.billing_client
@ordem_service
next
@ordem_service.billing_client.nil?
next
@ordem_service.billing_client.nil?
next
@ordem_service.billing_client.emails.type_sector(Sector::TypeSector::CONFIRMACAO_ENTREGA).blank?
@ordem_service.billing_client.nil?
next
continue
@ordem_service.billing_client.nil?
continue
@ordem_service.billing_client.nil?
next
continue
quit
continue
quit
email_sector.attributes.delete("id")
email_sector.attributes
email_sector
next
email_sector
next
email_sector
next
continue
next
continue
next
continue
next
continue
self.boarding_items.last.ordem_service.status
self.boarding_items.first.ordem_service.status
first = self.boarding_items.first.ordem_service.status
first = self.boarding_items.first
first = self.boardin_items.first
self
slef
continue
quit
@second.status
@first.status
@second.
@first
@boarding.boarding_items.count
@second = @boarding.boarding_items.last.ordem_service
@first = @boarding.boarding_items.first.ordem_service
@boarding = self
self
continue
next
@boarding.status
@boarding
continue
next
Pending::SkipDeclaredInExample
nextPending::SkipDeclaredInExample
next
exception.message
error: exception.message
exception
Exception
next
commit_transaction
next
Thread.current.status
error
next
@boarding
continue
@boarding.save!
@boarding.status = Boarding::TipoStatus::ENTREGUE
Boarding::TipoStatus::ENTREGUE
@boarding.status
@boarding
@boarding.check_status_ordem_service_entregue?
continue
next
continue
Boarding.where(id: @boarding.id).update(status: Boarding::TipoStatus::ENTREGUE)
Boarding.where(id: @boarding).update(status: Boarding::TipoStatus::ENTREGUE)
@boarding
@boarding.status
@boarding.status]
@boarding
continue
@boarding
continue
@boarding
continue
@boarding
continue
@boarding
continue
@boarding
continue
next
continue
next
@boarding.id
@boarding
Boarding.where(id: @boarding.id).update(status: Boarding::TipoStatus::ENTREGUE)
next
puts ">>>>>>>>>>> Boarding: #{@boarding.id}"
@ordem_service.id
@ordem_service.boarding_item.boarding
@ordem_service.boarding_item
@ordem_service
@ordem_service.id
puts ">>>>>>>>>>> Boarding: #{@boarding.id}"
@boarding.check_status_ordem_service_entregue?
next
@boarding.check_status_ordem_service_entregue?
next
@ordem_service.id
@boarding
next
@boarding.check_status_ordem_service_entregue?
next
@boarding.check_status_ordem_service_entregue?
next
@boarding.check_status_ordem_service_entregue?
next
continue
next
continue
next
quit
next
item
next
item
next
self.boarding_items.order(:delivery_number)
self.boarding_items.count
self.boarding_items
self
continue
next
self
self.boarding_items
next
continue
next
/
next
item.ordem_service.status == OrdemService::TipoStatus::EMBARCADO
next
continue
next
continue
next
@boarding.check_status_ordem_service_entregue?
@boarding.present?
next
e
next
e
next
e
next
status != 0
status
next
example_group_instance
next
e
next
continue
next
continue
next
mail
text_subject
to:
next
ordem_service.boarding_item.boarding_id
ordem_service.client.nome
ordem_service.danfes
ordem_service.ordem_service_logistic.delivery_driver.nome
ordem_service.boarding.boarding_vehicles.first.vehicle.placa
ordem_service.data_entrega_servico
ordem_service.carrier.nome
ordem_service.carrier
